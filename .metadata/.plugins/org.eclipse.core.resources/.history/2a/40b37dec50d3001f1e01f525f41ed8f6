package com.example.demo.controller;

import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entities.EnseignantChercheur;
import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Member;
import com.example.demo.service.IMemberService;

import lombok.AllArgsConstructor;

//Indique que cette classe est un contrôleur REST pour gérer les requêtes HTTP
@RestController
//Génère un constructeur avec tous les arguments pour l'injection des dépendances
@AllArgsConstructor
public class MemberRestController {

 // Dépendance vers le service pour la logique métier des membres
 private final IMemberService memberService;

 // Gère les requêtes GET pour récupérer tous les membres
 @GetMapping("/membres")
 public List<Member> findMembres() {
     return memberService.findAll();  // Renvoie la liste de tous les membres
 }

 // Gère les requêtes GET pour récupérer un membre par ID
 @GetMapping("/membres/{id}")
 public Member findOneMemberById(@PathVariable Long id) {
     return memberService.findMember(id);  // Recherche et renvoie le membre avec l'ID fourni
 }

 // Gère les requêtes GET pour rechercher un membre par CIN
 @GetMapping("/membres/search/cin")
 public Member findOneMemberByCin(@RequestParam String cin) {
     return memberService.findByCin(cin);  // Recherche un membre par CIN
 }

 // Gère les requêtes GET pour rechercher un membre par email
 @GetMapping("/membres/search/email")
 public Member findOneMemberByEmail(@RequestParam String email) {
     return memberService.findByEmail(email);  // Recherche un membre par email
 }

 // Gère les requêtes POST pour ajouter un nouvel enseignant chercheur
 @PostMapping("/membres")
 public Member addMembre(@RequestBody EnseignantChercheur m) {
     return memberService.addMember(m);  // Ajoute un enseignant chercheur et le renvoie
 }

 // Gère les requêtes POST pour ajouter un nouvel étudiant
 @PostMapping("/etudiant")
 public Member addEtudiant(@RequestBody Etudiant e) {
     return memberService.addMember(e);  // Ajoute un étudiant et le renvoie
 }

 // Gère les requêtes DELETE pour supprimer un membre par ID
 @DeleteMapping("/membres/{id}")
 public void deleteMembre(@PathVariable Long id) {
     memberService.deleteMember(id);  // Supprime le membre correspondant à l'ID fourni
 }
 
 // Gère les requêtes PUT pour mettre à jour les informations d'un étudiant
 @PutMapping(value = "/etudiant/{id}")
 public Member updateMembre(@PathVariable Long id, @RequestBody Etudiant p) {
     p.setId(id);  // Fixe l'ID avant de mettre à jour
     return memberService.updateMember(p);  // Met à jour et renvoie l'étudiant
 }

 // Gère les requêtes PUT pour mettre à jour les informations d'un enseignant chercheur
 @PutMapping(value = "/membres/enseignant/{id}")
 public Member updateMembre(@PathVariable Long id, @RequestBody EnseignantChercheur p) {
     p.setId(id);  // Fixe l'ID avant de mettre à jour
     return memberService.updateMember(p);  // Met à jour et renvoie l'enseignant chercheur
 }
}
